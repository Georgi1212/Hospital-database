SET SCHEMA FN72039;
/*
HospitalDepartments (name: VARCHAR(20), headDoctorID: CHAR(10));
 */
CREATE TABLE HOSPITALDEPARTMENTS(
    NAME         VARCHAR(20) NOT NULL CONSTRAINT PK_DEPTNAME PRIMARY KEY,
    HEADDOCTORID CHAR(10)    NOT NULL
);

/*
HospitalPatientsRooms (patientsRoomNumber: CHAR(5) ,departmentName: VARCHAR(20),
numberBeds: INT, numberFreeBeds: INT);
 */
CREATE TABLE HOSPITALPATIENTSROOMS(
    PATIENTSROOMNUMBER  CHAR(5)     NOT NULL,
    DEPARTMENTNAME      VARCHAR(20) NOT NULL CONSTRAINT FK_ROOM_DEPTNAME REFERENCES HOSPITALDEPARTMENTS(NAME) ON DELETE CASCADE,
    NUMBERBEDS          INT                  CHECK (NUMBERBEDS >= 1 AND NUMBERBEDS <= 4),
    NUMBERFREEBEDS      INT         NOT NULL CHECK (NUMBERFREEBEDS >= 0 AND NUMBERFREEBEDS <= 4),
    CONSTRAINT PK_HOSPITALPATIENTSROOMS PRIMARY KEY(PATIENTSROOMNUMBER, DEPARTMENTNAME)
);


/*
Staff (ID: CHAR (10), name: VARCHAR(20), position: VARCHAR(15),
telephoneNumber: CHAR(10), e-mail: VARCHAR(20), salary: INT, directorHospital: INT,
chiefNurse: INT, headOfDepartment: INT);
 */
/*
 Ако човекът е директор, на полето DIRECTORHOSPITAL ще пишем 1, а ако човекът не е директор - няма да пишем нищо ( полето ще е NULL).
 Аналогично и за това дали човекът е доктор, мед. сестра или човек на регистратура.
 */
CREATE TABLE STAFF(
    ID                 CHAR(10)      NOT NULL CONSTRAINT PK_ID PRIMARY KEY,
    NAME               VARCHAR(20)   NOT NULL,
    POSITION           VARCHAR(15)   NOT NULL,
    TELEPHONENUMBER    CHAR(10)      NOT NULL,
    EMAIL              VARCHAR(20)   NOT NULL CHECK(EMAIL LIKE '%_@_%.__%'),
    SALARY             INT           NOT NULL,
    DIRECTORHOSPITAL   INT                    CHECK(DIRECTORHOSPITAL = 1),
    CHIEFNURSE         INT                    CHECK(CHIEFNURSE = 1),
    HEADOFDEPARTMENT   INT                    CHECK(HEADOFDEPARTMENT = 1),
    DEPARTMENTNAME     VARCHAR(20)            CONSTRAINT FK_DEPTNAME_HOSPITALDEPARTMENTS_STAFF REFERENCES HOSPITALDEPARTMENTS(NAME) ON DELETE CASCADE
);


/*
Patients (EGN: CHAR(10), name: VARCHAR(20), gender: CHAR(1),
address: VARCHAR(30), telephoneNumber: CHAR(10),
healthInsured: INT, TELK: INT)
*/
CREATE TABLE PATIENTS(
    EGN             CHAR(10)    NOT NULL CONSTRAINT PK_EGN PRIMARY KEY,
    NAME            VARCHAR(20) NOT NULL,
    GENDER          CHAR(1)     NOT NULL CHECK(GENDER IN ('M', 'F')),
    ADDRESS         VARCHAR(30) NOT NULL,
    TELEPHONENUMBER CHAR(10)    NOT NULL,
    HEALTHINSURED   INT                  CHECK(HEALTHINSURED = 0 OR HEALTHINSURED = 1),
    TELK            INT                  CHECK(TELK = 0 OR TELK = 1)
);


/*
PatientsHospitalService (EGN, dateArrival, timeArrival, purposeOfVisit, officeNumber,
priceOfService, doctorID, registrySaffID, patientsRoomNumber, departmentName)
 */
CREATE TABLE PATIENTS_HOSPITAL_SERVICE(
    EGN                  CHAR(10)     NOT NULL CONSTRAINT FK_EGN_PATIENT_PHOSPSERVICE           REFERENCES PATIENTS(EGN) ON DELETE CASCADE,
    DATEARRIVAL          DATE         NOT NULL,
    TIMEARRIVAL          TIME         NOT NULL,
    PURPOSEVISIT         VARCHAR(20)  NOT NULL,
    OFFICENUMBER         CHAR(5)      NOT NULL,
    PRICEOFSERVICE       INT,
    DOCTORID             CHAR(10)     NOT NULL CONSTRAINT FK_DOCTORID_STAFF_PHOSPSERVICE        REFERENCES STAFF(ID)     ON DELETE CASCADE,
    REGISTRYSTAFFID      CHAR(10)     NOT NULL CONSTRAINT FK_REGISTRYSTAFFID_STAFF_PHOSPSERVICE REFERENCES STAFF(ID)     ON DELETE CASCADE,
    PATIENTS_ROOM_NUMBER CHAR(5),
    DEPARTMENT_NAME      VARCHAR(20)  NOT NULL,
    FOREIGN KEY (PATIENTS_ROOM_NUMBER, DEPARTMENT_NAME) REFERENCES HOSPITALPATIENTSROOMS(PATIENTSROOMNUMBER, DEPARTMENTNAME),
    CONSTRAINT PK_PATIENTSHOSPITALSERVICE PRIMARY KEY (EGN, DATEARRIVAL, TIMEARRIVAL)
);


/*
HistoryOfProcedures (EGN: CHAR(10), date: DATE, typeOfProcedures: VARCHAR(10),
resultOfProcedures: VARCHAR(10), diagnosisName: VARCHAR(15));
 */
CREATE TABLE HISTORYOFPROCEDURES(
    EGN                CHAR(10)    NOT NULL CONSTRAINT FK_EGN_PATIENT_HISTORYPROCEDURES REFERENCES PATIENTS(EGN) ON DELETE CASCADE,
    DATEPROCEDURE      DATE        NOT NULL,
    TYPEOFPROCEDURE    VARCHAR(10) NOT NULL,
    RESULTOFPROCESURES VARCHAR(10) NOT NULL,
    DIAGNOSISNAME      VARCHAR(15) NOT NULL,
    CONSTRAINT PK_HISTORYOFPROCEDURES PRIMARY KEY(EGN, DATEPROCEDURE)
);


/*
HospitalOffice (officeNumber: CHAR(5), departmentName: VARCHAR(20),
busy: INT, IDStaff: CHAR(10));
*/
CREATE TABLE HOSPITALOFFICE(
    OFFICENUMBER   CHAR(5)     NOT NULL,
    DEPARTMENTNAME VARCHAR(20) NOT NULL CONSTRAINT FK_OFFICE_DEPTNAME REFERENCES HOSPITALDEPARTMENTS(NAME) ON DELETE CASCADE,
    BUSY           INT                  CHECK(BUSY = 0 OR BUSY = 1),
    IDSTAFF        CHAR(10)    NOT NULL CONSTRAINT FK_OFFICE_DOCTORID REFERENCES STAFF(ID)                 ON DELETE CASCADE,
    CONSTRAINT PK_HOSPITALOFFICE PRIMARY KEY(OFFICENUMBER, DEPARTMENTNAME)
);


/*
Cleans (sanitarianID: CHAR(10), departmentName: VARCHAR(20));
 */
CREATE TABLE CLEANS(
    SANITARIANID   CHAR(10)    NOT NULL CONSTRAINT FK_SANITARIANID_STAFF_CLEANS       REFERENCES STAFF(ID)                 ON DELETE CASCADE,
    DEPARTMENTNAME VARCHAR(20) NOT NULL CONSTRAINT FK_DEPTNAME_HOSPDEPARTMENTS_CLEANS REFERENCES HOSPITALDEPARTMENTS(NAME) ON DELETE CASCADE,
    CONSTRAINT PK_CLEANS PRIMARY KEY (SANITARIANID, DEPARTMENTNAME)
);


/*
GoThrough (nurseID: CHAR(10), departmentName: VARCHAR(20),
patientsRoomNumber: CHAR(5));
*/
CREATE TABLE GOTHROUGH(
    NURSEID              CHAR(10)    NOT NULL CONSTRAINT FK_NURSEID_STAFF_GOTHROGH REFERENCES STAFF(ID)                                                 ON DELETE CASCADE,
    DEPARTMENT_NAME      VARCHAR(20) NOT NULL,
    PATIENTS_ROOM_NUMBER CHAR(5)     NOT NULL,
    FOREIGN KEY (PATIENTS_ROOM_NUMBER, DEPARTMENT_NAME)                            REFERENCES HOSPITALPATIENTSROOMS(PATIENTSROOMNUMBER, DEPARTMENTNAME) ON DELETE CASCADE,
    CONSTRAINT PK_GOTHROUGH PRIMARY KEY (NURSEID, DEPARTMENT_NAME, PATIENTS_ROOM_NUMBER)
);

/*
Helps (sanitarianID: CHAR(10), patientEGN: CHAR(10));
 */
CREATE TABLE HELPS(
    SANITARIANID CHAR(10) NOT NULL CONSTRAINT FK_SANITARIANID_STAFF_HELPS REFERENCES STAFF(ID)     ON DELETE CASCADE,
    PATIENTEGN   CHAR(10) NOT NULL CONSTRAINT FK_EGN_PATIENT_HELPS        REFERENCES PATIENTS(EGN) ON DELETE CASCADE,
    CONSTRAINT PK_HELPS PRIMARY KEY (SANITARIANID, PATIENTEGN)
);


/*
TakingCareOf (nurseID: CHAR(10), patientEGN: CHAR(10))
*/
CREATE TABLE TAKINGCAREOF(
    NURSEID    CHAR(10) NOT NULL CONSTRAINT FK_NURSEID_STAFF_TAKINGCAREOF REFERENCES STAFF(ID)     ON DELETE CASCADE,
    PATIENTEGN CHAR(10) NOT NULL CONSTRAINT FK_EGN_PATIENT_TAKINGCAREOF   REFERENCES PATIENTS(EGN) ON DELETE CASCADE,
    CONSTRAINT PK_TAKINGCAREOF PRIMARY KEY (NURSEID, PATIENTEGN)
);